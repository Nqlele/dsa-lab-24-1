import logging
import os
import asyncio
from decimal import Decimal, ROUND_HALF_UP
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
import psycopg2
from datetime import datetime
import requests
from functools import lru_cache

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

load_dotenv()

### –ü–û–ú–ï–ù–Ø–¢–¢–¨ –¢–£–¢–ê –ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê
API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")  
FLASK_SERVER_URL = os.getenv('FLASK_SERVER_URL', 'http://localhost:5000')
DB_CONFIG = {
    "user": "postgres",
    "password": "postgres",
    "database": "postgres",
    "host": "localhost",
    "port": 5433
}

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

class Register(StatesGroup):
    waiting_for_login = State()

class AddOperation(StatesGroup):
    waiting_for_type = State()
    waiting_for_sum = State()
    waiting_for_date = State()

class OperationsChoice(StatesGroup):
    waiting_for_currency = State()

class BudgetStates(StatesGroup):
    waiting_for_budget = State()

def db_connection():
    return psycopg2.connect(**DB_CONFIG)

@lru_cache(maxsize=3)
def get_cached_rate(currency: str) -> Decimal:
    try:
        response = requests.get(
            f"{FLASK_SERVER_URL}/rate?currency={currency}",
            timeout=3
        )
        if response.status_code == 200:
            rate = response.json().get('rate', 1.0)
            return Decimal(str(rate))  # –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Decimal
        return Decimal('1.0')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return Decimal('1.0')

def db_connection():
    return psycopg2.connect(**DB_CONFIG)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä</b> üí∞\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/reg - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/add_operation - –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "/operations - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
        "/setbudget - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.",
        parse_mode="HTML"
    )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command("reg"))
async def register(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        conn = db_connection()
        cursor = conn.cursor()
        
        cursor.execute("SELECT name FROM users WHERE chat_id = %s", (user_id,))
        if cursor.fetchone():
            await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return
        
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω (–æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(Register.waiting_for_login)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞
@dp.message(Register.waiting_for_login)
async def save_login(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    login = message.text.strip()
    
    if len(login) < 3 or len(login) > 20:
        await message.answer("‚ùå –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    if not login.isalnum():
        await message.answer("‚ùå –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    try:
        conn = db_connection()
        cursor = conn.cursor()
        
        cursor.execute("SELECT chat_id FROM users WHERE name = %s", (login,))
        if cursor.fetchone():
            await message.answer("‚ùå –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
            return
        
        cursor.execute(
            "INSERT INTO users (name, chat_id) VALUES (%s, %s)",
            (login, user_id)
        )
        conn.commit()
        
        await message.answer(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{login}</b>!", parse_mode="HTML")
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–∏–Ω–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
@dp.message(Command("add_operation"))
async def add_operation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        conn = db_connection()
        cursor = conn.cursor()
        
        cursor.execute("SELECT name FROM users WHERE chat_id = %s", (user_id,))
        user = cursor.fetchone()
        
        if not user:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /reg –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–†–ê–°–•–û–î"), types.KeyboardButton(text="–î–û–•–û–î")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=keyboard)
        await state.set_state(AddOperation.waiting_for_type)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
@dp.message(AddOperation.waiting_for_type)
async def process_type(message: types.Message, state: FSMContext):
    operation_type = message.text.upper()
    
    if operation_type not in ["–†–ê–°–•–û–î", "–î–û–•–û–î"]:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return
    
    await state.update_data(operation_type=operation_type)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddOperation.waiting_for_sum)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ (–±–µ–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏ "—Å–µ–≥–æ–¥–Ω—è")
@dp.message(AddOperation.waiting_for_sum)
async def process_sum(message: types.Message, state: FSMContext):
    try:
        amount = Decimal(message.text.replace(',', '.'))
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).")
        return
    
    await state.update_data(amount=amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
    await state.set_state(AddOperation.waiting_for_date)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ (–±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ "—Å–µ–≥–æ–¥–Ω—è")
@dp.message(AddOperation.waiting_for_date)
async def process_date(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    operation_type = user_data['operation_type']
    amount = user_data['amount']
    
    try:
        operation_date = datetime.strptime(message.text, '%Y-%m-%d').date()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
        return
    
    user_id = message.from_user.id
    try:
        conn = db_connection()
        cursor = conn.cursor()
        
        cursor.execute(
            "INSERT INTO operations (date, sum, chat_id, type_operation) VALUES (%s, %s, %s, %s)",
            (operation_date, amount, user_id, operation_type)
        )
        conn.commit()
        
        await message.answer(
            f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n\n"
            f"<b>–¢–∏–ø:</b> {operation_type}\n"
            f"<b>–°—É–º–º–∞:</b> {amount:.2f} —Ä—É–±.\n"
            f"<b>–î–∞—Ç–∞:</b> {operation_date}",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        await state.clear()
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—é–¥–∂–µ—Ç–∞
@dp.message(Command("setbudget"))
async def set_budget_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        conn = db_connection()
        cursor = conn.cursor()
        
        cursor.execute("SELECT name FROM users WHERE chat_id = %s", (user_id,))
        if not cursor.fetchone():
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /reg –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        current_month = datetime.now().date().replace(day=1)
        cursor.execute(
    "SELECT amount FROM budget WHERE chat_id = %s AND month = %s::date",
    (user_id, current_month)
)
        existing_budget = cursor.fetchone()
        
        if existing_budget:
            await message.answer(
                f"‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±—é–¥–∂–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {existing_budget[0]:.2f} —Ä—É–±.\n"
                "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ? –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –±—é–¥–∂–µ—Ç–∞ –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
            )
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±—é–¥–∂–µ—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü (–≤ —Ä—É–±–ª—è—Ö):")
        
        await state.set_state(BudgetStates.waiting_for_budget)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±—é–¥–∂–µ—Ç–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()

@dp.message(BudgetStates.waiting_for_budget)
async def process_budget(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    budget_input = message.text.lower()
    
    if budget_input == '–æ—Ç–º–µ–Ω–∞':
        await message.answer("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—é–¥–∂–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        return
    
    try:
        amount = Decimal(budget_input.replace(',', '.'))
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).")
        return
    
    current_month = datetime.now().date().replace(day=1)
    
    try:
        conn = db_connection()
        cursor = conn.cursor()
        
        cursor.execute("""
            INSERT INTO budget (chat_id, month, amount)
            VALUES (%s, %s, %s)
            ON CONFLICT (chat_id, month) 
            DO UPDATE SET amount = EXCLUDED.amount, created_at = CURRENT_TIMESTAMP
        """, (user_id, current_month, amount))
        
        conn.commit()
        
        await message.answer(
            f"‚úÖ –ë—é–¥–∂–µ—Ç –Ω–∞ {current_month.strftime('%B %Y')} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {amount:.2f} —Ä—É–±."
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        await state.clear()
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø–µ—Ä–∞—Ü–∏–π —Å —É—á–µ—Ç–æ–º –±—é–¥–∂–µ—Ç–∞
@dp.message(Command("operations"))
async def operations(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        conn = db_connection()
        cursor = conn.cursor()
        
        cursor.execute("SELECT name FROM users WHERE chat_id = %s", (user_id,))
        user = cursor.fetchone()
        
        if not user:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /reg –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="RUB"), types.KeyboardButton(text="USD"), types.KeyboardButton(text="EUR")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:", reply_markup=keyboard)
        await state.set_state(OperationsChoice.waiting_for_currency)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()

@dp.message(OperationsChoice.waiting_for_currency)
async def process_currency(message: types.Message, state: FSMContext):
    currency = message.text.upper()
    user_id = message.from_user.id

    if currency not in ["RUB", "USD", "EUR"]:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return

    try:
        with db_connection() as conn:
            with conn.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã
                rate = (
                    Decimal("1.0")
                    if currency == "RUB"
                    else get_cached_rate(currency)
                )

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞
                if currency != "RUB" and rate == Decimal("1.0"):
                    await message.answer(
                        f"‚ö†Ô∏è –ö—É—Ä—Å {currency} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∫–∞–∑—ã–≤–∞—é –≤ —Ä—É–±–ª—è—Ö.",
                        reply_markup=types.ReplyKeyboardRemove(),
                    )
                    currency = "RUB"
                    rate = Decimal("1.0")

                current_month = datetime.now().date().replace(day=1)

                # –ü–æ–ª—É—á–∞–µ–º –±—é–¥–∂–µ—Ç
                cursor.execute(
                    "SELECT amount FROM budget WHERE chat_id = %s AND month = %s",
                    (user_id, current_month),
                )
                budget = cursor.fetchone()
                budget_amount = (
                    Decimal(str(budget[0])) if budget else None
                )

                # –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
                cursor.execute(
                    """SELECT date, sum, type_operation 
                    FROM operations 
                    WHERE chat_id = %s 
                    AND date >= %s 
                    AND date < %s + INTERVAL '1 month'
                    ORDER BY date DESC""",
                    (user_id, current_month, current_month),
                )
                operations = cursor.fetchall()

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
                cursor.execute(
                    """SELECT COALESCE(SUM(sum), 0)
                    FROM operations
                    WHERE chat_id = %s
                    AND type_operation = '–†–ê–°–•–û–î'
                    AND date >= %s
                    AND date < %s + INTERVAL '1 month'""",
                    (user_id, current_month, current_month),
                )
                total_expenses = Decimal(str(cursor.fetchone()[0]))

                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                response_text = (
                    f"üìä <b>–í–∞—à–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ {current_month.strftime('%B %Y')} ({currency}):</b>\n\n"
                )
                for op in operations:
                    date, amount, op_type = op
                    converted_amount = (Decimal(str(amount)) / rate)
                    converted_amount = converted_amount.quantize(Decimal("0.00"), rounding=ROUND_HALF_UP)
                    response_text += f"<i>{date}</i>: {op_type} {converted_amount} {currency}\n"

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã
                total_expenses_converted = (total_expenses / rate).quantize(Decimal("0.00"), rounding=ROUND_HALF_UP)
                response_text += f"\n<b>–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤:</b> {total_expenses_converted} {currency}\n"

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞
                if budget_amount:
                    converted_budget = (budget_amount / rate).quantize(Decimal("0.00"), rounding=ROUND_HALF_UP)
                    remaining_budget = (budget_amount - total_expenses) / rate
                    remaining_budget = remaining_budget.quantize(Decimal("0.00"), rounding=ROUND_HALF_UP)

                    response_text += (
                        f"<b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç:</b> {converted_budget} {currency}\n"
                        f"<b>–û—Å—Ç–∞—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞:</b> {remaining_budget} {currency}\n"
                    )

                    # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                    if budget_amount != Decimal("0"):
                        percentage = (total_expenses / budget_amount * Decimal("100")).quantize(
                            Decimal("1.00"), rounding=ROUND_HALF_UP
                        )
                        percentage = min(percentage, Decimal("100.00"))  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 100%
                        filled = min(int(percentage) // 10, 10)  # –ù–µ –±–æ–ª—å—à–µ 10 —è—á–µ–µ–∫
                        progress_bar = "üü©" * filled + "‚¨úÔ∏è" * (10 - filled)
                    else:
                        percentage = Decimal("0.00")
                        progress_bar = "[‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è]"

                    response_text += f"\n<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {percentage}% {progress_bar}"
                else:
                    response_text += "\n‚ÑπÔ∏è –ë—é–¥–∂–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setbudget"

                await message.answer(response_text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())